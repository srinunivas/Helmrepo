#!groovy

def getLastSuccessfulCommit() {
  def lastSuccessfulHash = '4b825dc642cb6eb9a060e54bf8d69288fbee4904'
  def lastSuccessfulBuild = currentBuild.rawBuild.getPreviousSuccessfulBuild()
  if ( lastSuccessfulBuild ) {
    lastSuccessfulHash = commitHashForBuild( lastSuccessfulBuild )
  }
  return lastSuccessfulHash
}

/**
 * Gets the commit hash from a Jenkins build object, if any
 */
@NonCPS
def commitHashForBuild( build ) {
  //println build.getProperties().toString()
  def scmAction = build?.actions.find { action -> action instanceof jenkins.scm.api.SCMRevisionAction }
  if (scmAction) {
    return scmAction?.revision?.hash
  } else {
    scmAction = build?.actions.find { action -> action instanceof hudson.plugins.git.util.BuildData  }
    return scmAction?.lastBuild?.revision?.getSha1String()
  }
}


node('docker-build') {
    /*
    stage('Preparation') {
      git (
          url: 'ssh://git@dev-bitbucket.fircosoft.net:7999/fir/shadoker.git',
          credentialsId: '4fbbef4c-9bde-4988-bbc2-2b35cb10e14a'
      )
    }
    */
    checkout scm
    stage('Prepare shadoker-cli tool') {
        sh """pushd shadoker
pip3 install --user \$USER -r requirements.txt
popd"""
    }
    try {
      withEnv([
        "DOCKER_CONFIG=${WORKSPACE}/.docker",
        "DOCKER_CREDENTIALS=Jenkins2Portus",
        "REGISTRY=jenkins-deploy.fircosoft.net"
      ]) {
        stage('Changed references') {
          withCredentials([usernamePassword(credentialsId:"${DOCKER_CREDENTIALS}", passwordVariable: 'DOCKER_CREDS_PSW', usernameVariable: 'DOCKER_CREDS_USR')]) {
            sh "echo \"${DOCKER_CREDS_PSW}\" | docker login --username \"${DOCKER_CREDS_USR}\" --password-stdin \"${REGISTRY}\""
            def lastSuccessfulCommit = getLastSuccessfulCommit()
            def currentCommit = commitHashForBuild( currentBuild.rawBuild )
            if (lastSuccessfulCommit) {
                cmd = './shadoker-cli.sh docker build -d -w -s "' + lastSuccessfulCommit + '" -e "' + currentCommit + '" -b ${BUILD_NUMBER}'
                sh "$cmd"
            } else {
                sh "echo ERROR CANNOT DETERMINE LAST COMMIT"
            }
          }  
        }
      }
    } catch (e) {
        throw e
    } finally {
        sh 'echo done'
    }
}